/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package MemoryCompare;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Map.Entry;
import java.util.stream.Collectors;

import com.beust.jcommander.JCommander;

public class App {
    private Map<String, String> mapMemory(final String fileName) throws IOException {
        final var memoryMap = new HashMap<String, String>();

        final var file = new File(fileName);
        final var fileStream = new FileInputStream(file);
        try (var bufferedStream = new BufferedInputStream(fileStream)) {
            int currentChar;
            int memoryAddress = 0;
            while ((currentChar = bufferedStream.read()) != -1) {
                var addressString = String.format("%04X", memoryAddress);
                var valueString = String.format("%02X", currentChar);
                memoryMap.put(addressString, valueString);
                memoryAddress++;
            }
        }

        return memoryMap;
    }

    private List<Entry<String, String>> huntForAddresses(final Map<String, String> map1, final Map<String, String> map2, final String value) {        
        final var map1Results = map1.entrySet().stream()
            .filter(entry -> entry.getValue().equals(value))
            .filter(entry -> !map2.get(entry.getKey()).equals(value))
            .collect(Collectors.toList());

        final var map2Results = map2.entrySet().stream()
            .filter(entry -> entry.getValue().equals(value))
            .filter(entry -> !map1.get(entry.getKey()).equals(value))
            .collect(Collectors.toList());
            
        map1Results.addAll(map2Results);
        return map1Results;
    }

    public static void main(String[] args) {
        final var commands = new Args();
        JCommander.newBuilder()
            .args(args)
            .addObject(commands)
            .build();

        final var file1 = commands.file1;
        final var file2 = commands.file2;
        final var value = commands.value;

        final var app = new App();
        try {
            final var map1 = app.mapMemory(file1);
            final var map2 = app.mapMemory(file2);

            final var results = app.huntForAddresses(map1, map2, value).stream().map(e->e.getKey()).collect(Collectors.toSet());

            System.out.println(value + " changed at:");
            final SortedSet<String> sorted = new TreeSet<>(results);
            sorted.forEach(System.out::println);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
